{"version":3,"sources":["control-panel.js","data/iconText.svg","IconSvg.js","pins.js","city-info.js","App.js","index.js"],"names":["ControlPanel","props","className","CITIES","map","city","index","type","name","id","defaultChecked","onClick","onSelectCity","htmlFor","React","IconSvg","style","width","height","viewBox","fill","xmlns","d","x","y","count","Pins","data","position","longitude","latitude","cursor","stroke","transform","CityInfo","info","displayName","state","console","log","undefined","target","href","src","image","App","useState","zoom","viewport","setViewport","setSelectedPark","popupInfo","setPopupInfo","useEffect","listener","e","key","window","addEventListener","removeEventListener","useCallback","transitionInterpolator","FlyToInterpolator","speed","transitionDuration","mapboxApiAccessToken","mapStyle","onViewportChange","attributionControl","captureScroll","compact","right","top","tipSize","anchor","closeOnClick","onClose","left","padding","bottom","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a0b7680.chunk.js","sourcesContent":["import * as React from 'react';\n\nimport CITIES from './data/cities.json';\n\nfunction ControlPanel(props) {\n  return (\n    <div className=\"control-panel\">\n      {/*<h3>Camera Transition</h3>*/}\n      {/*<p>Smooth animate of the viewport.</p>*/}\n      {/*<div className=\"source-link\">*/}\n      {/*  <a*/}\n      {/*    href=\"https://github.com/visgl/react-map-gl/tree/6.1-release/examples/viewport-animation\"*/}\n      {/*    target=\"_new\"*/}\n      {/*  >*/}\n      {/*    View Code â†—*/}\n      {/*  </a>*/}\n      {/*</div>*/}\n      {/*<hr />*/}\n\n      {CITIES.map((city, index) => (\n        <div key={`btn-${index}`} className=\"input\">\n          <input\n            type=\"radio\"\n            name=\"city\"\n            id={`city-${index}`}\n            defaultChecked={city.city === 'San Francisco'}\n            onClick={() => props.onSelectCity(city)}\n          />\n          <label htmlFor={`city-${index}`}>{city.city}</label>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default React.memo(ControlPanel);\n","var _path, _path2, _text;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgIconText(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 32,\n    height: 44,\n    viewBox: \"0 0 32 44\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M32 16.2393C32 29.8478 16 39 16 39C16 39 0 29.8478 0 16.2393C0 7.27059 7.16344 0 16 0C24.8366 0 32 7.27059 32 16.2393Z\",\n    fill: \"#2B2B2D\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M15.8604 44C16.8711 44 17.6904 43.163 17.6904 42.1305C17.6904 41.098 16.8711 40.261 15.8604 40.261C14.8497 40.261 14.0303 41.098 14.0303 42.1305C14.0303 43.163 14.8497 44 15.8604 44Z\",\n    fill: \"#2B2B2D\"\n  })), _text || (_text = /*#__PURE__*/React.createElement(\"text\", {\n    x: 5,\n    y: 20,\n    fill: \"white\"\n  }, \"14\")));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgIconText);\nexport default __webpack_public_path__ + \"static/media/iconText.fbb3a786.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\n\nconst IconSvg = props => (\n    <svg\n        style={props.style}\n        width=\"32\" height={props.height} viewBox=\"0 0 32 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M32 16.2393C32 29.8478 16 39 16 39C16 39 0 29.8478 0 16.2393C0 7.27059 7.16344 0 16 0C24.8366 0 32 7.27059 32 16.2393Z\" fill=\"#2B2B2D\"/>\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15.8604 44C16.8711 44 17.6904 43.163 17.6904 42.1305C17.6904 41.098 16.8711 40.261 15.8604 40.261C14.8497 40.261 14.0303 41.098 14.0303 42.1305C14.0303 43.163 14.8497 44 15.8604 44Z\" fill=\"#2B2B2D\"/>\n        <text\n            dominant-baseline=\"middle\"\n            text-anchor=\"middle\"\n            x=\"50%\" y='20' fill=\"white\">\n            {props.count}</text>\n    </svg>\n\n);\n\nexport default IconSvg;\n","import * as React from 'react';\nimport {Marker} from 'react-map-gl';\nimport { ReactComponent as Pin } from '../src/data/iconText.svg';\nimport IconSvg from \"./IconSvg\";\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\nconst SIZE = 30;\n\n// Important for perf: the markers never change, avoid rerender when the map viewport changes\nfunction Pins(props) {\n  const {data, onClick} = props;\n\n  return data.map((city, index) => (\n    <Marker\n        style={{\n            position:'relative',\n        }}\n        onClick={() => onClick(city)}\n        key={`marker-${index}`} longitude={city.longitude} latitude={city.latitude}>\n        <IconSvg\n            count={city.count || null}\n            height={SIZE}\n            style={{\n                cursor: 'pointer',\n                fill: '#d00',\n                stroke: 'none',\n                transform: `translate(${-SIZE / 2}px,${-SIZE}px)`\n            }}\n        />\n    </Marker>\n  ));\n}\n\nexport default React.memo(Pins);\n","import * as React from 'react';\n\nfunction CityInfo(props) {\n    const {info} = props;\n    const displayName = `${info.city}, ${info.state}`;\n    console.log('info', info)\n\n    return (\n        <>\n            {info.count > 1 && (\n\n                <ul>\n                    <li>Agent name here</li>\n                    <li>Agent name here</li>\n                    <li>Agent name here</li>\n                    <li>Agent name here</li>\n                </ul>\n\n\n\n            )}\n            {info.count === undefined && (\n                <div>\n                    <div>\n                        {displayName} |{' '}\n                        <a\n                            target=\"_new\"\n                            href={`http://en.wikipedia.org/w/index.php?title=Special:Search&search=${displayName}`}\n                        >\n                            Wikipedia\n                        </a>\n                    </div>\n                    <img width={240} src={info.image}/>\n                </div>\n            )}\n        </>\n\n    );\n}\n\nexport default React.memo(CityInfo);\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport ReactMapGL, {\n    AttributionControl, FlyToInterpolator,\n    FullscreenControl,\n    GeolocateControl,\n    Marker,\n    NavigationControl,\n    Popup, ScaleControl\n} from \"react-map-gl\";\nimport * as parkDate from \"./data/skateboard-parks.json\";\nimport ControlPanel from \"./control-panel\";\nimport Pins from \"./pins\";\nimport CITIES from './data/cities.json';\nimport CityInfo from \"./city-info\";\n\nexport default function App() {\n  const [viewport, setViewport] = useState({\n    // latitude: 45.4211,\n    // longitude: -75.6903,\n    width: \"100vw\",\n    height: \"100vh\",\n    zoom: 1.5\n  });\n\n  const [selectedPark, setSelectedPark] = useState(null);\n    const [popupInfo, setPopupInfo] = useState(null);\n\n    const geolocateStyle = {\n        top: 0,\n        left: 0,\n        padding: '10px'\n    };\n\n    const fullscreenControlStyle = {\n        top: 36,\n        left: 0,\n        padding: '10px'\n    };\n\n    const navStyle = {\n        top: 72,\n        left: 0,\n        padding: '10px'\n    };\n\n    const scaleControlStyle = {\n        bottom: 36,\n        left: 0,\n        padding: '10px'\n    };\n\n  useEffect(() => {\n    const listener = e => {\n      if (e.key === \"Escape\") {\n        setSelectedPark(null);\n      }\n    };\n    window.addEventListener(\"keydown\", listener);\n\n    return () => {\n      window.removeEventListener(\"keydown\", listener);\n    };\n  }, []);\n\n    const attributionStyle= {\n        right: 0,\n        top: 0\n    };\n\n    const onSelectCity = useCallback(({longitude, latitude}) => {\n        setViewport({\n            longitude,\n            latitude,\n            zoom: 11,\n            transitionInterpolator: new FlyToInterpolator({speed: 1.2}),\n            transitionDuration: 'auto'\n        });\n    }, []);\n\n  return (\n      <>\n        <ReactMapGL\n            {...viewport}\n            mapboxApiAccessToken={'pk.eyJ1IjoiZGVkbiIsImEiOiJja3QwM3ZieXIyendzMzJvZGdhMmM3dnpiIn0.gpFPjtwSG-497ILOffYacA'}\n            // mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n            mapStyle=\"mapbox://styles/mapbox/light-v10\"\n            onViewportChange={viewport => {\n              setViewport(viewport);\n            }}\n            attributionControl={false}\n\n        >\n            <AttributionControl\n                captureScroll={true}\n\n                compact={true} style={attributionStyle} />\n\n            {/*/>*/}\n            {/*<AttributionControl*/}\n            {/*    captureScroll={false}*/}\n            {/*    style={attributionStyle}*/}\n            {/*/>*/}\n          {/*{parkDate.features.map(park => (*/}\n          {/*    <Marker*/}\n          {/*        key={park.properties.PARK_ID}*/}\n          {/*        latitude={park.geometry.coordinates[1]}*/}\n          {/*        longitude={park.geometry.coordinates[0]}*/}\n          {/*    >*/}\n          {/*      <button*/}\n          {/*          className=\"marker-btn\"*/}\n          {/*          onClick={e => {*/}\n          {/*            e.preventDefault();*/}\n          {/*            setSelectedPark(park);*/}\n          {/*          }}*/}\n          {/*      >*/}\n          {/*        <img src=\"/incon.svg\" alt=\"Skate Park Icon\" />*/}\n          {/*        <span>15</span>*/}\n          {/*      </button>*/}\n          {/*    </Marker>*/}\n          {/*))}*/}\n            <Pins data={CITIES} onClick={setPopupInfo} />\n\n            {popupInfo && (\n                <Popup\n                    tipSize={5}\n                    anchor=\"top\"\n                    longitude={popupInfo.longitude}\n                    latitude={popupInfo.latitude}\n                    closeOnClick={false}\n                    onClose={setPopupInfo}\n                >\n                    <CityInfo info={popupInfo} />\n                </Popup>\n            )}\n\n            <GeolocateControl style={geolocateStyle} />\n            <FullscreenControl style={fullscreenControlStyle} />\n            <NavigationControl style={navStyle} />\n            <ScaleControl style={scaleControlStyle} />\n            <ControlPanel onSelectCity={onSelectCity} />\n        </ReactMapGL>\n\n      </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n\n    <App />,\n\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}